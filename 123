1.SnakeAndLadderGame

import java.util.Random;

public class SnakeAndLadderGame {

    static Random random = new Random();

    static int rollDice() {
        return random.nextInt(6) + 1;
    }

    public static void main(String[] args) {
        int[] ladder = {5, 20, 30, 45, 60, 85};
        int[] snake = {15, 25, 37, 52, 68, 98};
        int maxPlayers = 2;
        int currentPlayer = 0;
        boolean gameOver = false;
        int[] currentPosition = new int[maxPlayers];
        int boardSize = 100;

        while (!gameOver) {
            System.out.println("Snake and Ladder Game");
            System.out.println("Current Player: " + (currentPlayer + 1));
            System.out.println("===========================");
            for (int i = 0; i < maxPlayers; i++) {
                System.out.println("Player " + (i + 1) + " is at position " + currentPosition[i]);
            }
            System.out.println("===========================");
            int diceResult = rollDice();
            System.out.println("Player " + (currentPlayer + 1) + " rolled a dice " + diceResult);
            currentPosition[currentPlayer] += diceResult;

            if (currentPosition[currentPlayer] >= boardSize) {
                System.out.println("Player " + (currentPlayer + 1) + " wins!");
                gameOver = true;
            }

            for (int ladderPosition : ladder) {
                if (currentPosition[currentPlayer] == ladderPosition) {
                    System.out.println("Player " + (currentPlayer + 1) + " climbed a ladder " + rollDice());
                    currentPosition[currentPlayer] += rollDice();
                }
            }

            for (int snakePosition : snake) {
                if (currentPosition[currentPlayer] == snakePosition) {
                    System.out.println("Player " + (currentPlayer + 1) + " bitten by a snake " + rollDice());
                    currentPosition[currentPlayer] -= rollDice();
                    currentPosition[currentPlayer] -= rollDice();
                }
            }

            currentPlayer = (currentPlayer + 1) % maxPlayers;
        }
    }
}


2. XOROperation

public class XOROperation {

    // XOR function implementation
    static boolean XOR(boolean a, boolean b) {
        return a != b;
    }

    public static void main(String[] args) {
        // Testing the XOR function with different inputs
        System.out.println("1 xor 0 : " + XOR(true, false));
        System.out.println("0 xor 1 : " + XOR(false, true));
        System.out.println("0 xor 0 : " + XOR(false, false));
        System.out.println("1 xor 1 : " + XOR(true, true));
    }
}


3. knapsack

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

public class FractionalKnapsack {

    public static void main(String[] args) {
        List<Item> items = new ArrayList<>();
        List<Float> weight = List.of(5f, 4f, 15f, 22f, 25f);
        List<Float> value = List.of(30f, 40f, 45f, 77f, 90f);
        float totalWeight = 60f;

        // Calculate value-to-weight ratios and populate the 'items' list
        for (int i = 0; i < weight.size(); i++) {
            float ratio = value.get(i) / weight.get(i);
            items.add(new Item(ratio, weight.get(i), value.get(i)));
        }

        // Sort items in non-increasing order of value-to-weight ratio
        Collections.sort(items, Comparator.reverseOrder());

        float currentVal = 0f;

        // Iterate through the sorted items and add them to the knapsack
        for (Item item : items) {
            if (item.weight <= totalWeight) {
                currentVal += item.value;
                totalWeight -= item.weight;
            } else {
                // If the item can't be fully added, add a fraction of it
                currentVal += (totalWeight / item.weight) * item.value;
                break; // No more items can be added
            }
        }

        // Print the maximum profit
        System.out.println("Maximum profit: " + currentVal);
    }

    // Item class to represent each item with its ratio, weight, and value
    static class Item implements Comparable<Item> {
        float ratio;
        float weight;
        float value;

        public Item(float ratio, float weight, float value) {
            this.ratio = ratio;
            this.weight = weight;
            this.value = value;
        }

        @Override
        public int compareTo(Item other) {
            return Float.compare(this.ratio, other.ratio);
        }
    }
}


4. Graph coloring

import java.util.*;

class Graph {
    Map<Integer, List<Integer>> adj = new HashMap<>();

    void addEdge(int u, int v, boolean dir) {
        adj.computeIfAbsent(u, k -> new ArrayList<>()).add(v);
        if (!dir) {
            adj.computeIfAbsent(v, k -> new ArrayList<>()).add(u);
        }
    }

    void printAdj() {
        for (Map.Entry<Integer, List<Integer>> entry : adj.entrySet()) {
            System.out.print(entry.getKey() + " -> ");
            for (int nbr : entry.getValue()) {
                System.out.print(nbr + ", ");
            }
            System.out.println();
        }
    }

    boolean isPossible(int node, int col, int[] colour) {
        for (int nbr : adj.getOrDefault(node, Collections.emptyList())) {
            if (col == colour[nbr]) {
                return false;
            }
        }
        return true;
    }

    boolean mColoured(int node, int m, int[] colour) {
        if (node == adj.size()) {
            return true;
        }

        for (int col = 1; col <= m; col++) {
            if (isPossible(node, col, colour)) {
                colour[node] = col;
                if (mColoured(node + 1, m, colour)) {
                    return true;
                }
                colour[node] = 0;
            }
        }

        return false;
    }
}

public class Main {
    public static void main(String[] args) {
        Graph g = new Graph();
        g.addEdge(0, 1, false);
        g.addEdge(0, 2, false);
        g.addEdge(0, 3, false);
        g.addEdge(1, 3, false);
        g.addEdge(1, 2, false);
        g.printAdj();

        int[] colour = new int[4];
        if (g.mColoured(0, 3, colour)) {
            System.out.println("Possible to colour");
            for (int i = 0; i < 4; i++) {
                System.out.println(i + " : " + colour[i]);
            }
        } else {
            System.out.println("Not Possible!!");
        }
    }
}


5. TicTacToe

import java.util.Scanner;

public class TicTacToe {
    public static boolean isWin(char[][] mat) {
        // check for row
        for (int i = 0; i < 3; i++) {
            if (mat[i][0] != ' ' && mat[i][0] == mat[i][1] && mat[i][1] == mat[i][2]) {
                return true;
            }
        }

        // check for col
        for (int i = 0; i < 3; i++) {
            if (mat[0][i] != ' ' && mat[0][i] == mat[1][i] && mat[1][i] == mat[2][i]) {
                return true;
            }
        }

        // check for diagonal
        if (mat[0][0] != ' ' && mat[0][0] == mat[1][1] && mat[1][1] == mat[2][2]) return true;
        if (mat[0][2] != ' ' && mat[0][2] == mat[1][1] && mat[1][1] == mat[2][0]) return true;

        // no match found
        return false;
    }

    public static void printBoard(char[][] board) {
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (j < 2) System.out.print(board[i][j] + " | ");
                else System.out.print(board[i][j]);
            }
            if (i < 2) System.out.println("\n---------");
            else System.out.println();
        }
    }

    public static void main(String[] args) {
        // Initializing board
        char[][] mat = new char[3][3];
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                mat[i][j] = ' ';
            }
        }

        // Taking count of the number of turns to be played
        int count = 0;
        char currPlayer = 'X';

        Scanner scanner = new Scanner(System.in);

        while (count < 9) {
            // Taking position as input
            int row, col;
            System.out.println("Player " + currPlayer + " turn : ");
            printBoard(mat);
            System.out.println("Enter the position to mark your spot (row, col) : ");
            row = scanner.nextInt();
            col = scanner.nextInt();

            // Check for valid position, if valid then mark
            if (mat[row - 1][col - 1] == ' ') {
                count += 1;
                mat[row - 1][col - 1] = currPlayer;
            } else {
                System.out.println("Enter a valid position!!");
                continue;
            }

            // Check for player win
            if (isWin(mat)) {
                printBoard(mat);
                System.out.println("Congratulations, Player " + currPlayer + " won!");
                break;
            }

            // Changing the player's turn
            currPlayer = (currPlayer == 'X') ? 'O' : 'X';
        }

        // Game over, but no winner
        if (count >= 9) {
            System.out.println("Match Draw!");
        }
    }
}



6. DFS

import java.util.*;

class Graph {
    Map<Integer, List<Integer>> adj;

    public Graph() {
        adj = new HashMap<>();
    }

    public void addEdge(int u, int v, boolean dir) {
        adj.computeIfAbsent(u, k -> new ArrayList<>()).add(v);
        if (!dir) {
            adj.computeIfAbsent(v, k -> new ArrayList<>()).add(u);
        }
    }

    public void printAdj() {
        for (Map.Entry<Integer, List<Integer>> entry : adj.entrySet()) {
            System.out.print(entry.getKey() + " -> ");
            for (int nbr : entry.getValue()) {
                System.out.print(nbr + ", ");
            }
            System.out.println();
        }
    }

    public void dfs(int node, Map<Integer, Boolean> vis) {
        System.out.print(node + " ");
        vis.put(node, true);
        for (int nbr : adj.getOrDefault(node, Collections.emptyList())) {
            if (!vis.getOrDefault(nbr, false)) {
                dfs(nbr, vis);
            }
        }
    }
}

public class Main {
    public static void main(String[] args) {
        Graph g = new Graph();

        g.addEdge(0, 1, true);
        g.addEdge(1, 2, true);
        g.addEdge(2, 3, true);
        g.addEdge(3, 0, true);

        g.printAdj();

        Map<Integer, Boolean> vis = new HashMap<>();
        for (int i = 0; i <= 4; i++) {
            if (!vis.getOrDefault(i, false)) {
                g.dfs(i, vis);
            }
        }
    }
}
